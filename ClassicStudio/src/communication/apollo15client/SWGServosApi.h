/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGServosApi_H_
#define _SWG_SWGServosApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGServosAnglesRequest.h"
#include "SWGServosAnglesResponse.h"
#include "SWGServosHandsRequest.h"
#include "SWGServosHandsResponse.h"
#include "SWGServosModeRequest.h"
#include "SWGServosModeResponse.h"
#include "SWGServosResultResponse.h"

#include <QObject>

namespace Swagger {

class SWGServosApi: public QObject {
    Q_OBJECT

public:
    SWGServosApi();
    SWGServosApi(QString host, QString basePath);
    ~SWGServosApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void getHandsDistance(QList<QString*>* names);
    void getServosAngles(QList<QString*>* names);
    void getServosMode(QList<QString*>* names);
    void putHandsDistance(SWGServosHandsRequest& body);
    void putServosAngles(SWGServosAnglesRequest& body);
    void putServosMode(SWGServosModeRequest& body);
    
private:
    void getHandsDistanceCallback (SWGHttpRequestWorker * worker);
    void getServosAnglesCallback (SWGHttpRequestWorker * worker);
    void getServosModeCallback (SWGHttpRequestWorker * worker);
    void putHandsDistanceCallback (SWGHttpRequestWorker * worker);
    void putServosAnglesCallback (SWGHttpRequestWorker * worker);
    void putServosModeCallback (SWGHttpRequestWorker * worker);
    
signals:
    void getHandsDistanceSignal(SWGServosHandsResponse* summary);
    void getServosAnglesSignal(SWGServosAnglesResponse* summary);
    void getServosModeSignal(SWGServosModeResponse* summary);
    void putHandsDistanceSignal(SWGServosHandsResponse* summary);
    void putServosAnglesSignal(SWGServosResultResponse* summary);
    void putServosModeSignal(SWGServosResultResponse* summary);
    
    void getHandsDistanceSignalE(SWGServosHandsResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getServosAnglesSignalE(SWGServosAnglesResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getServosModeSignalE(SWGServosModeResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putHandsDistanceSignalE(SWGServosHandsResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putServosAnglesSignalE(SWGServosResultResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putServosModeSignalE(SWGServosResultResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void getHandsDistanceSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getServosAnglesSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getServosModeSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putHandsDistanceSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putServosAnglesSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putServosModeSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
