/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGServosMode.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGServosMode::SWGServosMode(QString json) {
    init();
    this->fromJson(json);
}

SWGServosMode::SWGServosMode() {
    init();
}

SWGServosMode::~SWGServosMode() {
    this->cleanup();
}

void
SWGServosMode::init() {
    head_pitch = new QString("");
    m_head_pitch_isSet = false;
    head_yaw = new QString("");
    m_head_yaw_isSet = false;
    r_shoulder_pitch = new QString("");
    m_r_shoulder_pitch_isSet = false;
    r_shoulder_roll = new QString("");
    m_r_shoulder_roll_isSet = false;
    r_elbow_roll = new QString("");
    m_r_elbow_roll_isSet = false;
    r_hand = new QString("");
    m_r_hand_isSet = false;
    l_shoulder_pitch = new QString("");
    m_l_shoulder_pitch_isSet = false;
    l_shoulder_roll = new QString("");
    m_l_shoulder_roll_isSet = false;
    l_elbow_roll = new QString("");
    m_l_elbow_roll_isSet = false;
    l_hand = new QString("");
    m_l_hand_isSet = false;
    r_hip_yaw = new QString("");
    m_r_hip_yaw_isSet = false;
    r_hip_roll = new QString("");
    m_r_hip_roll_isSet = false;
    r_hip_pitch = new QString("");
    m_r_hip_pitch_isSet = false;
    r_knee_pitch = new QString("");
    m_r_knee_pitch_isSet = false;
    r_ankle_pitch = new QString("");
    m_r_ankle_pitch_isSet = false;
    r_ankle_roll = new QString("");
    m_r_ankle_roll_isSet = false;
    l_hip_yaw = new QString("");
    m_l_hip_yaw_isSet = false;
    l_hip_roll = new QString("");
    m_l_hip_roll_isSet = false;
    l_hip_pitch = new QString("");
    m_l_hip_pitch_isSet = false;
    l_knee_pitch = new QString("");
    m_l_knee_pitch_isSet = false;
    l_ankle_pitch = new QString("");
    m_l_ankle_pitch_isSet = false;
    l_ankle_roll = new QString("");
    m_l_ankle_roll_isSet = false;
}

void
SWGServosMode::cleanup() {
    if(head_pitch != nullptr) { 
        delete head_pitch;
    }
    if(head_yaw != nullptr) { 
        delete head_yaw;
    }
    if(r_shoulder_pitch != nullptr) { 
        delete r_shoulder_pitch;
    }
    if(r_shoulder_roll != nullptr) { 
        delete r_shoulder_roll;
    }
    if(r_elbow_roll != nullptr) { 
        delete r_elbow_roll;
    }
    if(r_hand != nullptr) { 
        delete r_hand;
    }
    if(l_shoulder_pitch != nullptr) { 
        delete l_shoulder_pitch;
    }
    if(l_shoulder_roll != nullptr) { 
        delete l_shoulder_roll;
    }
    if(l_elbow_roll != nullptr) { 
        delete l_elbow_roll;
    }
    if(l_hand != nullptr) { 
        delete l_hand;
    }
    if(r_hip_yaw != nullptr) { 
        delete r_hip_yaw;
    }
    if(r_hip_roll != nullptr) { 
        delete r_hip_roll;
    }
    if(r_hip_pitch != nullptr) { 
        delete r_hip_pitch;
    }
    if(r_knee_pitch != nullptr) { 
        delete r_knee_pitch;
    }
    if(r_ankle_pitch != nullptr) { 
        delete r_ankle_pitch;
    }
    if(r_ankle_roll != nullptr) { 
        delete r_ankle_roll;
    }
    if(l_hip_yaw != nullptr) { 
        delete l_hip_yaw;
    }
    if(l_hip_roll != nullptr) { 
        delete l_hip_roll;
    }
    if(l_hip_pitch != nullptr) { 
        delete l_hip_pitch;
    }
    if(l_knee_pitch != nullptr) { 
        delete l_knee_pitch;
    }
    if(l_ankle_pitch != nullptr) { 
        delete l_ankle_pitch;
    }
    if(l_ankle_roll != nullptr) { 
        delete l_ankle_roll;
    }
}

SWGServosMode*
SWGServosMode::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGServosMode::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&head_pitch, pJson["HeadPitch"], "QString", "QString");
    
    ::Swagger::setValue(&head_yaw, pJson["HeadYaw"], "QString", "QString");
    
    ::Swagger::setValue(&r_shoulder_pitch, pJson["RShoulderPitch"], "QString", "QString");
    
    ::Swagger::setValue(&r_shoulder_roll, pJson["RShoulderRoll"], "QString", "QString");
    
    ::Swagger::setValue(&r_elbow_roll, pJson["RElbowRoll"], "QString", "QString");
    
    ::Swagger::setValue(&r_hand, pJson["RHand"], "QString", "QString");
    
    ::Swagger::setValue(&l_shoulder_pitch, pJson["LShoulderPitch"], "QString", "QString");
    
    ::Swagger::setValue(&l_shoulder_roll, pJson["LShoulderRoll"], "QString", "QString");
    
    ::Swagger::setValue(&l_elbow_roll, pJson["LElbowRoll"], "QString", "QString");
    
    ::Swagger::setValue(&l_hand, pJson["LHand"], "QString", "QString");
    
    ::Swagger::setValue(&r_hip_yaw, pJson["RHipYaw"], "QString", "QString");
    
    ::Swagger::setValue(&r_hip_roll, pJson["RHipRoll"], "QString", "QString");
    
    ::Swagger::setValue(&r_hip_pitch, pJson["RHipPitch"], "QString", "QString");
    
    ::Swagger::setValue(&r_knee_pitch, pJson["RKneePitch"], "QString", "QString");
    
    ::Swagger::setValue(&r_ankle_pitch, pJson["RAnklePitch"], "QString", "QString");
    
    ::Swagger::setValue(&r_ankle_roll, pJson["RAnkleRoll"], "QString", "QString");
    
    ::Swagger::setValue(&l_hip_yaw, pJson["LHipYaw"], "QString", "QString");
    
    ::Swagger::setValue(&l_hip_roll, pJson["LHipRoll"], "QString", "QString");
    
    ::Swagger::setValue(&l_hip_pitch, pJson["LHipPitch"], "QString", "QString");
    
    ::Swagger::setValue(&l_knee_pitch, pJson["LKneePitch"], "QString", "QString");
    
    ::Swagger::setValue(&l_ankle_pitch, pJson["LAnklePitch"], "QString", "QString");
    
    ::Swagger::setValue(&l_ankle_roll, pJson["LAnkleRoll"], "QString", "QString");
    
}

QString
SWGServosMode::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGServosMode::asJsonObject() {
    QJsonObject obj;
    if(head_pitch != nullptr && *head_pitch != QString("")){
        toJsonValue(QString("HeadPitch"), head_pitch, obj, QString("QString"));
    }
    if(head_yaw != nullptr && *head_yaw != QString("")){
        toJsonValue(QString("HeadYaw"), head_yaw, obj, QString("QString"));
    }
    if(r_shoulder_pitch != nullptr && *r_shoulder_pitch != QString("")){
        toJsonValue(QString("RShoulderPitch"), r_shoulder_pitch, obj, QString("QString"));
    }
    if(r_shoulder_roll != nullptr && *r_shoulder_roll != QString("")){
        toJsonValue(QString("RShoulderRoll"), r_shoulder_roll, obj, QString("QString"));
    }
    if(r_elbow_roll != nullptr && *r_elbow_roll != QString("")){
        toJsonValue(QString("RElbowRoll"), r_elbow_roll, obj, QString("QString"));
    }
    if(r_hand != nullptr && *r_hand != QString("")){
        toJsonValue(QString("RHand"), r_hand, obj, QString("QString"));
    }
    if(l_shoulder_pitch != nullptr && *l_shoulder_pitch != QString("")){
        toJsonValue(QString("LShoulderPitch"), l_shoulder_pitch, obj, QString("QString"));
    }
    if(l_shoulder_roll != nullptr && *l_shoulder_roll != QString("")){
        toJsonValue(QString("LShoulderRoll"), l_shoulder_roll, obj, QString("QString"));
    }
    if(l_elbow_roll != nullptr && *l_elbow_roll != QString("")){
        toJsonValue(QString("LElbowRoll"), l_elbow_roll, obj, QString("QString"));
    }
    if(l_hand != nullptr && *l_hand != QString("")){
        toJsonValue(QString("LHand"), l_hand, obj, QString("QString"));
    }
    if(r_hip_yaw != nullptr && *r_hip_yaw != QString("")){
        toJsonValue(QString("RHipYaw"), r_hip_yaw, obj, QString("QString"));
    }
    if(r_hip_roll != nullptr && *r_hip_roll != QString("")){
        toJsonValue(QString("RHipRoll"), r_hip_roll, obj, QString("QString"));
    }
    if(r_hip_pitch != nullptr && *r_hip_pitch != QString("")){
        toJsonValue(QString("RHipPitch"), r_hip_pitch, obj, QString("QString"));
    }
    if(r_knee_pitch != nullptr && *r_knee_pitch != QString("")){
        toJsonValue(QString("RKneePitch"), r_knee_pitch, obj, QString("QString"));
    }
    if(r_ankle_pitch != nullptr && *r_ankle_pitch != QString("")){
        toJsonValue(QString("RAnklePitch"), r_ankle_pitch, obj, QString("QString"));
    }
    if(r_ankle_roll != nullptr && *r_ankle_roll != QString("")){
        toJsonValue(QString("RAnkleRoll"), r_ankle_roll, obj, QString("QString"));
    }
    if(l_hip_yaw != nullptr && *l_hip_yaw != QString("")){
        toJsonValue(QString("LHipYaw"), l_hip_yaw, obj, QString("QString"));
    }
    if(l_hip_roll != nullptr && *l_hip_roll != QString("")){
        toJsonValue(QString("LHipRoll"), l_hip_roll, obj, QString("QString"));
    }
    if(l_hip_pitch != nullptr && *l_hip_pitch != QString("")){
        toJsonValue(QString("LHipPitch"), l_hip_pitch, obj, QString("QString"));
    }
    if(l_knee_pitch != nullptr && *l_knee_pitch != QString("")){
        toJsonValue(QString("LKneePitch"), l_knee_pitch, obj, QString("QString"));
    }
    if(l_ankle_pitch != nullptr && *l_ankle_pitch != QString("")){
        toJsonValue(QString("LAnklePitch"), l_ankle_pitch, obj, QString("QString"));
    }
    if(l_ankle_roll != nullptr && *l_ankle_roll != QString("")){
        toJsonValue(QString("LAnkleRoll"), l_ankle_roll, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGServosMode::getHeadPitch() {
    return head_pitch;
}
void
SWGServosMode::setHeadPitch(QString* head_pitch) {
    this->head_pitch = head_pitch;
    this->m_head_pitch_isSet = true;
}

QString*
SWGServosMode::getHeadYaw() {
    return head_yaw;
}
void
SWGServosMode::setHeadYaw(QString* head_yaw) {
    this->head_yaw = head_yaw;
    this->m_head_yaw_isSet = true;
}

QString*
SWGServosMode::getRShoulderPitch() {
    return r_shoulder_pitch;
}
void
SWGServosMode::setRShoulderPitch(QString* r_shoulder_pitch) {
    this->r_shoulder_pitch = r_shoulder_pitch;
    this->m_r_shoulder_pitch_isSet = true;
}

QString*
SWGServosMode::getRShoulderRoll() {
    return r_shoulder_roll;
}
void
SWGServosMode::setRShoulderRoll(QString* r_shoulder_roll) {
    this->r_shoulder_roll = r_shoulder_roll;
    this->m_r_shoulder_roll_isSet = true;
}

QString*
SWGServosMode::getRElbowRoll() {
    return r_elbow_roll;
}
void
SWGServosMode::setRElbowRoll(QString* r_elbow_roll) {
    this->r_elbow_roll = r_elbow_roll;
    this->m_r_elbow_roll_isSet = true;
}

QString*
SWGServosMode::getRHand() {
    return r_hand;
}
void
SWGServosMode::setRHand(QString* r_hand) {
    this->r_hand = r_hand;
    this->m_r_hand_isSet = true;
}

QString*
SWGServosMode::getLShoulderPitch() {
    return l_shoulder_pitch;
}
void
SWGServosMode::setLShoulderPitch(QString* l_shoulder_pitch) {
    this->l_shoulder_pitch = l_shoulder_pitch;
    this->m_l_shoulder_pitch_isSet = true;
}

QString*
SWGServosMode::getLShoulderRoll() {
    return l_shoulder_roll;
}
void
SWGServosMode::setLShoulderRoll(QString* l_shoulder_roll) {
    this->l_shoulder_roll = l_shoulder_roll;
    this->m_l_shoulder_roll_isSet = true;
}

QString*
SWGServosMode::getLElbowRoll() {
    return l_elbow_roll;
}
void
SWGServosMode::setLElbowRoll(QString* l_elbow_roll) {
    this->l_elbow_roll = l_elbow_roll;
    this->m_l_elbow_roll_isSet = true;
}

QString*
SWGServosMode::getLHand() {
    return l_hand;
}
void
SWGServosMode::setLHand(QString* l_hand) {
    this->l_hand = l_hand;
    this->m_l_hand_isSet = true;
}

QString*
SWGServosMode::getRHipYaw() {
    return r_hip_yaw;
}
void
SWGServosMode::setRHipYaw(QString* r_hip_yaw) {
    this->r_hip_yaw = r_hip_yaw;
    this->m_r_hip_yaw_isSet = true;
}

QString*
SWGServosMode::getRHipRoll() {
    return r_hip_roll;
}
void
SWGServosMode::setRHipRoll(QString* r_hip_roll) {
    this->r_hip_roll = r_hip_roll;
    this->m_r_hip_roll_isSet = true;
}

QString*
SWGServosMode::getRHipPitch() {
    return r_hip_pitch;
}
void
SWGServosMode::setRHipPitch(QString* r_hip_pitch) {
    this->r_hip_pitch = r_hip_pitch;
    this->m_r_hip_pitch_isSet = true;
}

QString*
SWGServosMode::getRKneePitch() {
    return r_knee_pitch;
}
void
SWGServosMode::setRKneePitch(QString* r_knee_pitch) {
    this->r_knee_pitch = r_knee_pitch;
    this->m_r_knee_pitch_isSet = true;
}

QString*
SWGServosMode::getRAnklePitch() {
    return r_ankle_pitch;
}
void
SWGServosMode::setRAnklePitch(QString* r_ankle_pitch) {
    this->r_ankle_pitch = r_ankle_pitch;
    this->m_r_ankle_pitch_isSet = true;
}

QString*
SWGServosMode::getRAnkleRoll() {
    return r_ankle_roll;
}
void
SWGServosMode::setRAnkleRoll(QString* r_ankle_roll) {
    this->r_ankle_roll = r_ankle_roll;
    this->m_r_ankle_roll_isSet = true;
}

QString*
SWGServosMode::getLHipYaw() {
    return l_hip_yaw;
}
void
SWGServosMode::setLHipYaw(QString* l_hip_yaw) {
    this->l_hip_yaw = l_hip_yaw;
    this->m_l_hip_yaw_isSet = true;
}

QString*
SWGServosMode::getLHipRoll() {
    return l_hip_roll;
}
void
SWGServosMode::setLHipRoll(QString* l_hip_roll) {
    this->l_hip_roll = l_hip_roll;
    this->m_l_hip_roll_isSet = true;
}

QString*
SWGServosMode::getLHipPitch() {
    return l_hip_pitch;
}
void
SWGServosMode::setLHipPitch(QString* l_hip_pitch) {
    this->l_hip_pitch = l_hip_pitch;
    this->m_l_hip_pitch_isSet = true;
}

QString*
SWGServosMode::getLKneePitch() {
    return l_knee_pitch;
}
void
SWGServosMode::setLKneePitch(QString* l_knee_pitch) {
    this->l_knee_pitch = l_knee_pitch;
    this->m_l_knee_pitch_isSet = true;
}

QString*
SWGServosMode::getLAnklePitch() {
    return l_ankle_pitch;
}
void
SWGServosMode::setLAnklePitch(QString* l_ankle_pitch) {
    this->l_ankle_pitch = l_ankle_pitch;
    this->m_l_ankle_pitch_isSet = true;
}

QString*
SWGServosMode::getLAnkleRoll() {
    return l_ankle_roll;
}
void
SWGServosMode::setLAnkleRoll(QString* l_ankle_roll) {
    this->l_ankle_roll = l_ankle_roll;
    this->m_l_ankle_roll_isSet = true;
}


bool
SWGServosMode::isSet(){
    bool isObjectUpdated = false;
    do{
        if(head_pitch != nullptr && *head_pitch != QString("")){ isObjectUpdated = true; break;}
        if(head_yaw != nullptr && *head_yaw != QString("")){ isObjectUpdated = true; break;}
        if(r_shoulder_pitch != nullptr && *r_shoulder_pitch != QString("")){ isObjectUpdated = true; break;}
        if(r_shoulder_roll != nullptr && *r_shoulder_roll != QString("")){ isObjectUpdated = true; break;}
        if(r_elbow_roll != nullptr && *r_elbow_roll != QString("")){ isObjectUpdated = true; break;}
        if(r_hand != nullptr && *r_hand != QString("")){ isObjectUpdated = true; break;}
        if(l_shoulder_pitch != nullptr && *l_shoulder_pitch != QString("")){ isObjectUpdated = true; break;}
        if(l_shoulder_roll != nullptr && *l_shoulder_roll != QString("")){ isObjectUpdated = true; break;}
        if(l_elbow_roll != nullptr && *l_elbow_roll != QString("")){ isObjectUpdated = true; break;}
        if(l_hand != nullptr && *l_hand != QString("")){ isObjectUpdated = true; break;}
        if(r_hip_yaw != nullptr && *r_hip_yaw != QString("")){ isObjectUpdated = true; break;}
        if(r_hip_roll != nullptr && *r_hip_roll != QString("")){ isObjectUpdated = true; break;}
        if(r_hip_pitch != nullptr && *r_hip_pitch != QString("")){ isObjectUpdated = true; break;}
        if(r_knee_pitch != nullptr && *r_knee_pitch != QString("")){ isObjectUpdated = true; break;}
        if(r_ankle_pitch != nullptr && *r_ankle_pitch != QString("")){ isObjectUpdated = true; break;}
        if(r_ankle_roll != nullptr && *r_ankle_roll != QString("")){ isObjectUpdated = true; break;}
        if(l_hip_yaw != nullptr && *l_hip_yaw != QString("")){ isObjectUpdated = true; break;}
        if(l_hip_roll != nullptr && *l_hip_roll != QString("")){ isObjectUpdated = true; break;}
        if(l_hip_pitch != nullptr && *l_hip_pitch != QString("")){ isObjectUpdated = true; break;}
        if(l_knee_pitch != nullptr && *l_knee_pitch != QString("")){ isObjectUpdated = true; break;}
        if(l_ankle_pitch != nullptr && *l_ankle_pitch != QString("")){ isObjectUpdated = true; break;}
        if(l_ankle_roll != nullptr && *l_ankle_roll != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

