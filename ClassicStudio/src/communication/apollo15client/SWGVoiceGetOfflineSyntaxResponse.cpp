/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGVoiceGetOfflineSyntaxResponse.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGVoiceGetOfflineSyntaxResponse::SWGVoiceGetOfflineSyntaxResponse(QString json) {
    init();
    this->fromJson(json);
}

SWGVoiceGetOfflineSyntaxResponse::SWGVoiceGetOfflineSyntaxResponse() {
    init();
}

SWGVoiceGetOfflineSyntaxResponse::~SWGVoiceGetOfflineSyntaxResponse() {
    this->cleanup();
}

void
SWGVoiceGetOfflineSyntaxResponse::init() {
    grammar = new QString("");
    m_grammar_isSet = false;
    slot = new QList<SWGVoiceOfflineSlot*>();
    m_slot_isSet = false;
    start = new QString("");
    m_start_isSet = false;
    startinfo = new QString("");
    m_startinfo_isSet = false;
    rule = new QList<SWGVoiceOfflineSyntaxRule*>();
    m_rule_isSet = false;
}

void
SWGVoiceGetOfflineSyntaxResponse::cleanup() {
    if(grammar != nullptr) { 
        delete grammar;
    }
    if(slot != nullptr) { 
        auto arr = slot;
        for(auto o: *arr) { 
            delete o;
        }
        delete slot;
    }
    if(start != nullptr) { 
        delete start;
    }
    if(startinfo != nullptr) { 
        delete startinfo;
    }
    if(rule != nullptr) { 
        auto arr = rule;
        for(auto o: *arr) { 
            delete o;
        }
        delete rule;
    }
}

SWGVoiceGetOfflineSyntaxResponse*
SWGVoiceGetOfflineSyntaxResponse::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGVoiceGetOfflineSyntaxResponse::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&grammar, pJson["grammar"], "QString", "QString");
    
    
    ::Swagger::setValue(&slot, pJson["slot"], "QList", "SWGVoiceOfflineSlot");
    ::Swagger::setValue(&start, pJson["start"], "QString", "QString");
    
    ::Swagger::setValue(&startinfo, pJson["startinfo"], "QString", "QString");
    
    
    ::Swagger::setValue(&rule, pJson["rule"], "QList", "SWGVoiceOfflineSyntaxRule");
}

QString
SWGVoiceGetOfflineSyntaxResponse::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGVoiceGetOfflineSyntaxResponse::asJsonObject() {
    QJsonObject obj;
    if(grammar != nullptr && *grammar != QString("")){
        toJsonValue(QString("grammar"), grammar, obj, QString("QString"));
    }
    if(slot->size() > 0){
        toJsonArray((QList<void*>*)slot, obj, "slot", "SWGVoiceOfflineSlot");
    }
    if(start != nullptr && *start != QString("")){
        toJsonValue(QString("start"), start, obj, QString("QString"));
    }
    if(startinfo != nullptr && *startinfo != QString("")){
        toJsonValue(QString("startinfo"), startinfo, obj, QString("QString"));
    }
    if(rule->size() > 0){
        toJsonArray((QList<void*>*)rule, obj, "rule", "SWGVoiceOfflineSyntaxRule");
    }

    return obj;
}

QString*
SWGVoiceGetOfflineSyntaxResponse::getGrammar() {
    return grammar;
}
void
SWGVoiceGetOfflineSyntaxResponse::setGrammar(QString* grammar) {
    this->grammar = grammar;
    this->m_grammar_isSet = true;
}

QList<SWGVoiceOfflineSlot*>*
SWGVoiceGetOfflineSyntaxResponse::getSlot() {
    return slot;
}
void
SWGVoiceGetOfflineSyntaxResponse::setSlot(QList<SWGVoiceOfflineSlot*>* slot) {
    this->slot = slot;
    this->m_slot_isSet = true;
}

QString*
SWGVoiceGetOfflineSyntaxResponse::getStart() {
    return start;
}
void
SWGVoiceGetOfflineSyntaxResponse::setStart(QString* start) {
    this->start = start;
    this->m_start_isSet = true;
}

QString*
SWGVoiceGetOfflineSyntaxResponse::getStartinfo() {
    return startinfo;
}
void
SWGVoiceGetOfflineSyntaxResponse::setStartinfo(QString* startinfo) {
    this->startinfo = startinfo;
    this->m_startinfo_isSet = true;
}

QList<SWGVoiceOfflineSyntaxRule*>*
SWGVoiceGetOfflineSyntaxResponse::getRule() {
    return rule;
}
void
SWGVoiceGetOfflineSyntaxResponse::setRule(QList<SWGVoiceOfflineSyntaxRule*>* rule) {
    this->rule = rule;
    this->m_rule_isSet = true;
}


bool
SWGVoiceGetOfflineSyntaxResponse::isSet(){
    bool isObjectUpdated = false;
    do{
        if(grammar != nullptr && *grammar != QString("")){ isObjectUpdated = true; break;}
        if(slot->size() > 0){ isObjectUpdated = true; break;}
        if(start != nullptr && *start != QString("")){ isObjectUpdated = true; break;}
        if(startinfo != nullptr && *startinfo != QString("")){ isObjectUpdated = true; break;}
        if(rule->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

