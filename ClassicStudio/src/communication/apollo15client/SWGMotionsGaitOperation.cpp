/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGMotionsGaitOperation.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGMotionsGaitOperation::SWGMotionsGaitOperation(QString json) {
    init();
    this->fromJson(json);
}

SWGMotionsGaitOperation::SWGMotionsGaitOperation() {
    init();
}

SWGMotionsGaitOperation::~SWGMotionsGaitOperation() {
    this->cleanup();
}

void
SWGMotionsGaitOperation::init() {
    period = 0;
    m_period_isSet = false;
    speed_v = 0;
    m_speed_v_isSet = false;
    speed_h = 0;
    m_speed_h_isSet = false;
    wave = false;
    m_wave_isSet = false;
    steps = 0;
    m_steps_isSet = false;
    timestamp = 0;
    m_timestamp_isSet = false;
}

void
SWGMotionsGaitOperation::cleanup() {






}

SWGMotionsGaitOperation*
SWGMotionsGaitOperation::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGMotionsGaitOperation::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&period, pJson["period"], "qint32", "");
    
    ::Swagger::setValue(&speed_v, pJson["speed_v"], "qint32", "");
    
    ::Swagger::setValue(&speed_h, pJson["speed_h"], "qint32", "");
    
    ::Swagger::setValue(&wave, pJson["wave"], "bool", "");
    
    ::Swagger::setValue(&steps, pJson["steps"], "qint32", "");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "qint32", "");
    
}

QString
SWGMotionsGaitOperation::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGMotionsGaitOperation::asJsonObject() {
    QJsonObject obj;
    if(m_period_isSet){
        obj.insert("period", QJsonValue(period));
    }
    if(m_speed_v_isSet){
        obj.insert("speed_v", QJsonValue(speed_v));
    }
    if(m_speed_h_isSet){
        obj.insert("speed_h", QJsonValue(speed_h));
    }
    if(m_wave_isSet){
        obj.insert("wave", QJsonValue(wave));
    }
    if(m_steps_isSet){
        obj.insert("steps", QJsonValue(steps));
    }
    if(m_timestamp_isSet){
        obj.insert("timestamp", QJsonValue(timestamp));
    }

    return obj;
}

qint32
SWGMotionsGaitOperation::getPeriod() {
    return period;
}
void
SWGMotionsGaitOperation::setPeriod(qint32 period) {
    this->period = period;
    this->m_period_isSet = true;
}

qint32
SWGMotionsGaitOperation::getSpeedV() {
    return speed_v;
}
void
SWGMotionsGaitOperation::setSpeedV(qint32 speed_v) {
    this->speed_v = speed_v;
    this->m_speed_v_isSet = true;
}

qint32
SWGMotionsGaitOperation::getSpeedH() {
    return speed_h;
}
void
SWGMotionsGaitOperation::setSpeedH(qint32 speed_h) {
    this->speed_h = speed_h;
    this->m_speed_h_isSet = true;
}

bool
SWGMotionsGaitOperation::isWave() {
    return wave;
}
void
SWGMotionsGaitOperation::setWave(bool wave) {
    this->wave = wave;
    this->m_wave_isSet = true;
}

qint32
SWGMotionsGaitOperation::getSteps() {
    return steps;
}
void
SWGMotionsGaitOperation::setSteps(qint32 steps) {
    this->steps = steps;
    this->m_steps_isSet = true;
}

qint32
SWGMotionsGaitOperation::getTimestamp() {
    return timestamp;
}
void
SWGMotionsGaitOperation::setTimestamp(qint32 timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}


bool
SWGMotionsGaitOperation::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_period_isSet){ isObjectUpdated = true; break;}
        if(m_speed_v_isSet){ isObjectUpdated = true; break;}
        if(m_speed_h_isSet){ isObjectUpdated = true; break;}
        if(m_wave_isSet){ isObjectUpdated = true; break;}
        if(m_steps_isSet){ isObjectUpdated = true; break;}
        if(m_timestamp_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

