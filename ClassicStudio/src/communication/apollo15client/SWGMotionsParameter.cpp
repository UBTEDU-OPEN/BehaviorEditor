/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGMotionsParameter.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGMotionsParameter::SWGMotionsParameter(QString json) {
    init();
    this->fromJson(json);
}

SWGMotionsParameter::SWGMotionsParameter() {
    init();
}

SWGMotionsParameter::~SWGMotionsParameter() {
    this->cleanup();
}

void
SWGMotionsParameter::init() {
    name = new QString("");
    m_name_isSet = false;
    direction = new QString("");
    m_direction_isSet = false;
    repeat = 0;
    m_repeat_isSet = false;
    speed = new QString("");
    m_speed_isSet = false;
}

void
SWGMotionsParameter::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(direction != nullptr) { 
        delete direction;
    }

    if(speed != nullptr) { 
        delete speed;
    }
}

SWGMotionsParameter*
SWGMotionsParameter::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGMotionsParameter::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&direction, pJson["direction"], "QString", "QString");
    
    ::Swagger::setValue(&repeat, pJson["repeat"], "qint32", "");
    
    ::Swagger::setValue(&speed, pJson["speed"], "QString", "QString");
    
}

QString
SWGMotionsParameter::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGMotionsParameter::asJsonObject() {
    QJsonObject obj;
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(direction != nullptr && *direction != QString("")){
        toJsonValue(QString("direction"), direction, obj, QString("QString"));
    }
    if(m_repeat_isSet){
        obj.insert("repeat", QJsonValue(repeat));
    }
    if(speed != nullptr && *speed != QString("")){
        toJsonValue(QString("speed"), speed, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGMotionsParameter::getName() {
    return name;
}
void
SWGMotionsParameter::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
SWGMotionsParameter::getDirection() {
    return direction;
}
void
SWGMotionsParameter::setDirection(QString* direction) {
    this->direction = direction;
    this->m_direction_isSet = true;
}

qint32
SWGMotionsParameter::getRepeat() {
    return repeat;
}
void
SWGMotionsParameter::setRepeat(qint32 repeat) {
    this->repeat = repeat;
    this->m_repeat_isSet = true;
}

QString*
SWGMotionsParameter::getSpeed() {
    return speed;
}
void
SWGMotionsParameter::setSpeed(QString* speed) {
    this->speed = speed;
    this->m_speed_isSet = true;
}


bool
SWGMotionsParameter::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(direction != nullptr && *direction != QString("")){ isObjectUpdated = true; break;}
        if(m_repeat_isSet){ isObjectUpdated = true; break;}
        if(speed != nullptr && *speed != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

