/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGSensorsPressureValue.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGSensorsPressureValue::SWGSensorsPressureValue(QString json) {
    init();
    this->fromJson(json);
}

SWGSensorsPressureValue::SWGSensorsPressureValue() {
    init();
}

SWGSensorsPressureValue::~SWGSensorsPressureValue() {
    this->cleanup();
}

void
SWGSensorsPressureValue::init() {
    pressure = new QList<SWGSensorsPressureInfo*>();
    m_pressure_isSet = false;
}

void
SWGSensorsPressureValue::cleanup() {
    if(pressure != nullptr) { 
        auto arr = pressure;
        for(auto o: *arr) { 
            delete o;
        }
        delete pressure;
    }
}

SWGSensorsPressureValue*
SWGSensorsPressureValue::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSensorsPressureValue::fromJsonObject(QJsonObject pJson) {
    
    ::Swagger::setValue(&pressure, pJson["pressure"], "QList", "SWGSensorsPressureInfo");
}

QString
SWGSensorsPressureValue::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGSensorsPressureValue::asJsonObject() {
    QJsonObject obj;
    if(pressure->size() > 0){
        toJsonArray((QList<void*>*)pressure, obj, "pressure", "SWGSensorsPressureInfo");
    }

    return obj;
}

QList<SWGSensorsPressureInfo*>*
SWGSensorsPressureValue::getPressure() {
    return pressure;
}
void
SWGSensorsPressureValue::setPressure(QList<SWGSensorsPressureInfo*>* pressure) {
    this->pressure = pressure;
    this->m_pressure_isSet = true;
}


bool
SWGSensorsPressureValue::isSet(){
    bool isObjectUpdated = false;
    do{
        if(pressure->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

