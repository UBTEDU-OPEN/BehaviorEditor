/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGSensorsGyroInfo.h
 *
 * 
 */

#ifndef SWGSensorsGyroInfo_H_
#define SWGSensorsGyroInfo_H_

#include <QJsonObject>



#include "SWGObject.h"

namespace Swagger {

class SWGSensorsGyroInfo: public SWGObject {
public:
    SWGSensorsGyroInfo();
    SWGSensorsGyroInfo(QString json);
    ~SWGSensorsGyroInfo();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    SWGSensorsGyroInfo* fromJson(QString jsonString) override;

    qint32 getId();
    void setId(qint32 id);

    float getGyroX();
    void setGyroX(float gyro_x);

    float getGyroY();
    void setGyroY(float gyro_y);

    float getGyroZ();
    void setGyroZ(float gyro_z);

    float getAccelX();
    void setAccelX(float accel_x);

    float getAccelY();
    void setAccelY(float accel_y);

    float getAccelZ();
    void setAccelZ(float accel_z);

    float getCompassX();
    void setCompassX(float compass_x);

    float getCompassY();
    void setCompassY(float compass_y);

    float getCompassZ();
    void setCompassZ(float compass_z);

    float getEulerX();
    void setEulerX(float euler_x);

    float getEulerY();
    void setEulerY(float euler_y);

    float getEulerZ();
    void setEulerZ(float euler_z);


    virtual bool isSet() override;

private:
    qint32 id;
    bool m_id_isSet;

    float gyro_x;
    bool m_gyro_x_isSet;

    float gyro_y;
    bool m_gyro_y_isSet;

    float gyro_z;
    bool m_gyro_z_isSet;

    float accel_x;
    bool m_accel_x_isSet;

    float accel_y;
    bool m_accel_y_isSet;

    float accel_z;
    bool m_accel_z_isSet;

    float compass_x;
    bool m_compass_x_isSet;

    float compass_y;
    bool m_compass_y_isSet;

    float compass_z;
    bool m_compass_z_isSet;

    float euler_x;
    bool m_euler_x_isSet;

    float euler_y;
    bool m_euler_y_isSet;

    float euler_z;
    bool m_euler_z_isSet;

};

}

#endif /* SWGSensorsGyroInfo_H_ */
