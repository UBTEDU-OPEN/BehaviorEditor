/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGServosMode.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGServosMode::SWGServosMode(QString json) {
    init();
    this->fromJson(json);
}

SWGServosMode::SWGServosMode() {
    init();
}

SWGServosMode::~SWGServosMode() {
    this->cleanup();
}

void
SWGServosMode::init() {
    right_shoulder_roll = new QString("");
    m_right_shoulder_roll_isSet = false;
    right_shoulder_flex = new QString("");
    m_right_shoulder_flex_isSet = false;
    right_elbow_flex = new QString("");
    m_right_elbow_flex_isSet = false;
    left_shoulder_roll = new QString("");
    m_left_shoulder_roll_isSet = false;
    left_shoulder_flex = new QString("");
    m_left_shoulder_flex_isSet = false;
    left_elbow_flex = new QString("");
    m_left_elbow_flex_isSet = false;
    right_hip_lr = new QString("");
    m_right_hip_lr_isSet = false;
    right_hip_fb = new QString("");
    m_right_hip_fb_isSet = false;
    right_knee_flex = new QString("");
    m_right_knee_flex_isSet = false;
    right_ankle_fb = new QString("");
    m_right_ankle_fb_isSet = false;
    right_ankle_ud = new QString("");
    m_right_ankle_ud_isSet = false;
    left_hip_lr = new QString("");
    m_left_hip_lr_isSet = false;
    left_hip_fb = new QString("");
    m_left_hip_fb_isSet = false;
    left_knee_flex = new QString("");
    m_left_knee_flex_isSet = false;
    left_ankle_fb = new QString("");
    m_left_ankle_fb_isSet = false;
    left_ankle_ud = new QString("");
    m_left_ankle_ud_isSet = false;
    neck_lr = new QString("");
    m_neck_lr_isSet = false;
}

void
SWGServosMode::cleanup() {
    if(right_shoulder_roll != nullptr) { 
        delete right_shoulder_roll;
    }
    if(right_shoulder_flex != nullptr) { 
        delete right_shoulder_flex;
    }
    if(right_elbow_flex != nullptr) { 
        delete right_elbow_flex;
    }
    if(left_shoulder_roll != nullptr) { 
        delete left_shoulder_roll;
    }
    if(left_shoulder_flex != nullptr) { 
        delete left_shoulder_flex;
    }
    if(left_elbow_flex != nullptr) { 
        delete left_elbow_flex;
    }
    if(right_hip_lr != nullptr) { 
        delete right_hip_lr;
    }
    if(right_hip_fb != nullptr) { 
        delete right_hip_fb;
    }
    if(right_knee_flex != nullptr) { 
        delete right_knee_flex;
    }
    if(right_ankle_fb != nullptr) { 
        delete right_ankle_fb;
    }
    if(right_ankle_ud != nullptr) { 
        delete right_ankle_ud;
    }
    if(left_hip_lr != nullptr) { 
        delete left_hip_lr;
    }
    if(left_hip_fb != nullptr) { 
        delete left_hip_fb;
    }
    if(left_knee_flex != nullptr) { 
        delete left_knee_flex;
    }
    if(left_ankle_fb != nullptr) { 
        delete left_ankle_fb;
    }
    if(left_ankle_ud != nullptr) { 
        delete left_ankle_ud;
    }
    if(neck_lr != nullptr) { 
        delete neck_lr;
    }
}

SWGServosMode*
SWGServosMode::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGServosMode::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&right_shoulder_roll, pJson["RightShoulderRoll"], "QString", "QString");
    
    ::Swagger::setValue(&right_shoulder_flex, pJson["RightShoulderFlex"], "QString", "QString");
    
    ::Swagger::setValue(&right_elbow_flex, pJson["RightElbowFlex"], "QString", "QString");
    
    ::Swagger::setValue(&left_shoulder_roll, pJson["LeftShoulderRoll"], "QString", "QString");
    
    ::Swagger::setValue(&left_shoulder_flex, pJson["LeftShoulderFlex"], "QString", "QString");
    
    ::Swagger::setValue(&left_elbow_flex, pJson["LeftElbowFlex"], "QString", "QString");
    
    ::Swagger::setValue(&right_hip_lr, pJson["RightHipLR"], "QString", "QString");
    
    ::Swagger::setValue(&right_hip_fb, pJson["RightHipFB"], "QString", "QString");
    
    ::Swagger::setValue(&right_knee_flex, pJson["RightKneeFlex"], "QString", "QString");
    
    ::Swagger::setValue(&right_ankle_fb, pJson["RightAnkleFB"], "QString", "QString");
    
    ::Swagger::setValue(&right_ankle_ud, pJson["RightAnkleUD"], "QString", "QString");
    
    ::Swagger::setValue(&left_hip_lr, pJson["LeftHipLR"], "QString", "QString");
    
    ::Swagger::setValue(&left_hip_fb, pJson["LeftHipFB"], "QString", "QString");
    
    ::Swagger::setValue(&left_knee_flex, pJson["LeftKneeFlex"], "QString", "QString");
    
    ::Swagger::setValue(&left_ankle_fb, pJson["LeftAnkleFB"], "QString", "QString");
    
    ::Swagger::setValue(&left_ankle_ud, pJson["LeftAnkleUD"], "QString", "QString");
    
    ::Swagger::setValue(&neck_lr, pJson["NeckLR"], "QString", "QString");
    
}

QString
SWGServosMode::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGServosMode::asJsonObject() {
    QJsonObject obj;
    if(right_shoulder_roll != nullptr && *right_shoulder_roll != QString("")){
        toJsonValue(QString("RightShoulderRoll"), right_shoulder_roll, obj, QString("QString"));
    }
    if(right_shoulder_flex != nullptr && *right_shoulder_flex != QString("")){
        toJsonValue(QString("RightShoulderFlex"), right_shoulder_flex, obj, QString("QString"));
    }
    if(right_elbow_flex != nullptr && *right_elbow_flex != QString("")){
        toJsonValue(QString("RightElbowFlex"), right_elbow_flex, obj, QString("QString"));
    }
    if(left_shoulder_roll != nullptr && *left_shoulder_roll != QString("")){
        toJsonValue(QString("LeftShoulderRoll"), left_shoulder_roll, obj, QString("QString"));
    }
    if(left_shoulder_flex != nullptr && *left_shoulder_flex != QString("")){
        toJsonValue(QString("LeftShoulderFlex"), left_shoulder_flex, obj, QString("QString"));
    }
    if(left_elbow_flex != nullptr && *left_elbow_flex != QString("")){
        toJsonValue(QString("LeftElbowFlex"), left_elbow_flex, obj, QString("QString"));
    }
    if(right_hip_lr != nullptr && *right_hip_lr != QString("")){
        toJsonValue(QString("RightHipLR"), right_hip_lr, obj, QString("QString"));
    }
    if(right_hip_fb != nullptr && *right_hip_fb != QString("")){
        toJsonValue(QString("RightHipFB"), right_hip_fb, obj, QString("QString"));
    }
    if(right_knee_flex != nullptr && *right_knee_flex != QString("")){
        toJsonValue(QString("RightKneeFlex"), right_knee_flex, obj, QString("QString"));
    }
    if(right_ankle_fb != nullptr && *right_ankle_fb != QString("")){
        toJsonValue(QString("RightAnkleFB"), right_ankle_fb, obj, QString("QString"));
    }
    if(right_ankle_ud != nullptr && *right_ankle_ud != QString("")){
        toJsonValue(QString("RightAnkleUD"), right_ankle_ud, obj, QString("QString"));
    }
    if(left_hip_lr != nullptr && *left_hip_lr != QString("")){
        toJsonValue(QString("LeftHipLR"), left_hip_lr, obj, QString("QString"));
    }
    if(left_hip_fb != nullptr && *left_hip_fb != QString("")){
        toJsonValue(QString("LeftHipFB"), left_hip_fb, obj, QString("QString"));
    }
    if(left_knee_flex != nullptr && *left_knee_flex != QString("")){
        toJsonValue(QString("LeftKneeFlex"), left_knee_flex, obj, QString("QString"));
    }
    if(left_ankle_fb != nullptr && *left_ankle_fb != QString("")){
        toJsonValue(QString("LeftAnkleFB"), left_ankle_fb, obj, QString("QString"));
    }
    if(left_ankle_ud != nullptr && *left_ankle_ud != QString("")){
        toJsonValue(QString("LeftAnkleUD"), left_ankle_ud, obj, QString("QString"));
    }
    if(neck_lr != nullptr && *neck_lr != QString("")){
        toJsonValue(QString("NeckLR"), neck_lr, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGServosMode::getRightShoulderRoll() {
    return right_shoulder_roll;
}
void
SWGServosMode::setRightShoulderRoll(QString* right_shoulder_roll) {
    this->right_shoulder_roll = right_shoulder_roll;
    this->m_right_shoulder_roll_isSet = true;
}

QString*
SWGServosMode::getRightShoulderFlex() {
    return right_shoulder_flex;
}
void
SWGServosMode::setRightShoulderFlex(QString* right_shoulder_flex) {
    this->right_shoulder_flex = right_shoulder_flex;
    this->m_right_shoulder_flex_isSet = true;
}

QString*
SWGServosMode::getRightElbowFlex() {
    return right_elbow_flex;
}
void
SWGServosMode::setRightElbowFlex(QString* right_elbow_flex) {
    this->right_elbow_flex = right_elbow_flex;
    this->m_right_elbow_flex_isSet = true;
}

QString*
SWGServosMode::getLeftShoulderRoll() {
    return left_shoulder_roll;
}
void
SWGServosMode::setLeftShoulderRoll(QString* left_shoulder_roll) {
    this->left_shoulder_roll = left_shoulder_roll;
    this->m_left_shoulder_roll_isSet = true;
}

QString*
SWGServosMode::getLeftShoulderFlex() {
    return left_shoulder_flex;
}
void
SWGServosMode::setLeftShoulderFlex(QString* left_shoulder_flex) {
    this->left_shoulder_flex = left_shoulder_flex;
    this->m_left_shoulder_flex_isSet = true;
}

QString*
SWGServosMode::getLeftElbowFlex() {
    return left_elbow_flex;
}
void
SWGServosMode::setLeftElbowFlex(QString* left_elbow_flex) {
    this->left_elbow_flex = left_elbow_flex;
    this->m_left_elbow_flex_isSet = true;
}

QString*
SWGServosMode::getRightHipLr() {
    return right_hip_lr;
}
void
SWGServosMode::setRightHipLr(QString* right_hip_lr) {
    this->right_hip_lr = right_hip_lr;
    this->m_right_hip_lr_isSet = true;
}

QString*
SWGServosMode::getRightHipFb() {
    return right_hip_fb;
}
void
SWGServosMode::setRightHipFb(QString* right_hip_fb) {
    this->right_hip_fb = right_hip_fb;
    this->m_right_hip_fb_isSet = true;
}

QString*
SWGServosMode::getRightKneeFlex() {
    return right_knee_flex;
}
void
SWGServosMode::setRightKneeFlex(QString* right_knee_flex) {
    this->right_knee_flex = right_knee_flex;
    this->m_right_knee_flex_isSet = true;
}

QString*
SWGServosMode::getRightAnkleFb() {
    return right_ankle_fb;
}
void
SWGServosMode::setRightAnkleFb(QString* right_ankle_fb) {
    this->right_ankle_fb = right_ankle_fb;
    this->m_right_ankle_fb_isSet = true;
}

QString*
SWGServosMode::getRightAnkleUd() {
    return right_ankle_ud;
}
void
SWGServosMode::setRightAnkleUd(QString* right_ankle_ud) {
    this->right_ankle_ud = right_ankle_ud;
    this->m_right_ankle_ud_isSet = true;
}

QString*
SWGServosMode::getLeftHipLr() {
    return left_hip_lr;
}
void
SWGServosMode::setLeftHipLr(QString* left_hip_lr) {
    this->left_hip_lr = left_hip_lr;
    this->m_left_hip_lr_isSet = true;
}

QString*
SWGServosMode::getLeftHipFb() {
    return left_hip_fb;
}
void
SWGServosMode::setLeftHipFb(QString* left_hip_fb) {
    this->left_hip_fb = left_hip_fb;
    this->m_left_hip_fb_isSet = true;
}

QString*
SWGServosMode::getLeftKneeFlex() {
    return left_knee_flex;
}
void
SWGServosMode::setLeftKneeFlex(QString* left_knee_flex) {
    this->left_knee_flex = left_knee_flex;
    this->m_left_knee_flex_isSet = true;
}

QString*
SWGServosMode::getLeftAnkleFb() {
    return left_ankle_fb;
}
void
SWGServosMode::setLeftAnkleFb(QString* left_ankle_fb) {
    this->left_ankle_fb = left_ankle_fb;
    this->m_left_ankle_fb_isSet = true;
}

QString*
SWGServosMode::getLeftAnkleUd() {
    return left_ankle_ud;
}
void
SWGServosMode::setLeftAnkleUd(QString* left_ankle_ud) {
    this->left_ankle_ud = left_ankle_ud;
    this->m_left_ankle_ud_isSet = true;
}

QString*
SWGServosMode::getNeckLr() {
    return neck_lr;
}
void
SWGServosMode::setNeckLr(QString* neck_lr) {
    this->neck_lr = neck_lr;
    this->m_neck_lr_isSet = true;
}


bool
SWGServosMode::isSet(){
    bool isObjectUpdated = false;
    do{
        if(right_shoulder_roll != nullptr && *right_shoulder_roll != QString("")){ isObjectUpdated = true; break;}
        if(right_shoulder_flex != nullptr && *right_shoulder_flex != QString("")){ isObjectUpdated = true; break;}
        if(right_elbow_flex != nullptr && *right_elbow_flex != QString("")){ isObjectUpdated = true; break;}
        if(left_shoulder_roll != nullptr && *left_shoulder_roll != QString("")){ isObjectUpdated = true; break;}
        if(left_shoulder_flex != nullptr && *left_shoulder_flex != QString("")){ isObjectUpdated = true; break;}
        if(left_elbow_flex != nullptr && *left_elbow_flex != QString("")){ isObjectUpdated = true; break;}
        if(right_hip_lr != nullptr && *right_hip_lr != QString("")){ isObjectUpdated = true; break;}
        if(right_hip_fb != nullptr && *right_hip_fb != QString("")){ isObjectUpdated = true; break;}
        if(right_knee_flex != nullptr && *right_knee_flex != QString("")){ isObjectUpdated = true; break;}
        if(right_ankle_fb != nullptr && *right_ankle_fb != QString("")){ isObjectUpdated = true; break;}
        if(right_ankle_ud != nullptr && *right_ankle_ud != QString("")){ isObjectUpdated = true; break;}
        if(left_hip_lr != nullptr && *left_hip_lr != QString("")){ isObjectUpdated = true; break;}
        if(left_hip_fb != nullptr && *left_hip_fb != QString("")){ isObjectUpdated = true; break;}
        if(left_knee_flex != nullptr && *left_knee_flex != QString("")){ isObjectUpdated = true; break;}
        if(left_ankle_fb != nullptr && *left_ankle_fb != QString("")){ isObjectUpdated = true; break;}
        if(left_ankle_ud != nullptr && *left_ankle_ud != QString("")){ isObjectUpdated = true; break;}
        if(neck_lr != nullptr && *neck_lr != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

