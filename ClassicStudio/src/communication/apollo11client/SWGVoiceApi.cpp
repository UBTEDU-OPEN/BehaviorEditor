/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGVoiceApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGVoiceApi::SWGVoiceApi() {}

SWGVoiceApi::~SWGVoiceApi() {}

SWGVoiceApi::SWGVoiceApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGVoiceApi::deleteVoiceAsr() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/asr");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::deleteVoiceAsrCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::deleteVoiceAsrCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGCommonResponse* output = static_cast<SWGCommonResponse*>(create(json, QString("SWGCommonResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGCommonResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteVoiceAsrSignal(output);
    } else {
        emit deleteVoiceAsrSignalE(output, error_type, error_str);
        emit deleteVoiceAsrSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::deleteVoiceIat() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/iat");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::deleteVoiceIatCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::deleteVoiceIatCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGCommonResponse* output = static_cast<SWGCommonResponse*>(create(json, QString("SWGCommonResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGCommonResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteVoiceIatSignal(output);
    } else {
        emit deleteVoiceIatSignalE(output, error_type, error_str);
        emit deleteVoiceIatSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::deleteVoiceOfflineSyntax(SWGVoiceDeleteOfflineSyntax& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/asr/offlinesyntax");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");


    
    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::deleteVoiceOfflineSyntaxCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::deleteVoiceOfflineSyntaxCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGCommonResponse* output = static_cast<SWGCommonResponse*>(create(json, QString("SWGCommonResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGCommonResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteVoiceOfflineSyntaxSignal(output);
    } else {
        emit deleteVoiceOfflineSyntaxSignalE(output, error_type, error_str);
        emit deleteVoiceOfflineSyntaxSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::deleteVoiceTts() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/tts");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::deleteVoiceTtsCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::deleteVoiceTtsCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGCommonResponse* output = static_cast<SWGCommonResponse*>(create(json, QString("SWGCommonResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGCommonResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteVoiceTtsSignal(output);
    } else {
        emit deleteVoiceTtsSignalE(output, error_type, error_str);
        emit deleteVoiceTtsSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::getVoiceAsr() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/asr");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::getVoiceAsrCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::getVoiceAsrCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGVoiceGetResponse* output = static_cast<SWGVoiceGetResponse*>(create(json, QString("SWGVoiceGetResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGVoiceGetResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getVoiceAsrSignal(output);
    } else {
        emit getVoiceAsrSignalE(output, error_type, error_str);
        emit getVoiceAsrSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::getVoiceIat() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/iat");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::getVoiceIatCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::getVoiceIatCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGVoiceGetResponse* output = static_cast<SWGVoiceGetResponse*>(create(json, QString("SWGVoiceGetResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGVoiceGetResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getVoiceIatSignal(output);
    } else {
        emit getVoiceIatSignalE(output, error_type, error_str);
        emit getVoiceIatSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::getVoiceOfflineSyntax(QString* body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/asr/offlinesyntax");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("body"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(body)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::getVoiceOfflineSyntaxCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::getVoiceOfflineSyntaxCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGVoiceGetOfflineSyntaxResponse* output = static_cast<SWGVoiceGetOfflineSyntaxResponse*>(create(json, QString("SWGVoiceGetOfflineSyntaxResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGVoiceGetOfflineSyntaxResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getVoiceOfflineSyntaxSignal(output);
    } else {
        emit getVoiceOfflineSyntaxSignalE(output, error_type, error_str);
        emit getVoiceOfflineSyntaxSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::getVoiceOfflineSyntaxGrammars() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/asr/offlinesyntax/grammars");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::getVoiceOfflineSyntaxGrammarsCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::getVoiceOfflineSyntaxGrammarsCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGVoiceGetOfflineSyntaxGrammarsResponse* output = static_cast<SWGVoiceGetOfflineSyntaxGrammarsResponse*>(create(json, QString("SWGVoiceGetOfflineSyntaxGrammarsResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGVoiceGetOfflineSyntaxGrammarsResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getVoiceOfflineSyntaxGrammarsSignal(output);
    } else {
        emit getVoiceOfflineSyntaxGrammarsSignalE(output, error_type, error_str);
        emit getVoiceOfflineSyntaxGrammarsSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::getVoiceTts(qint64 timestamp) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/tts");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("timestamp"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(timestamp)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::getVoiceTtsCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::getVoiceTtsCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGVoiceGetResponse* output = static_cast<SWGVoiceGetResponse*>(create(json, QString("SWGVoiceGetResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGVoiceGetResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getVoiceTtsSignal(output);
    } else {
        emit getVoiceTtsSignalE(output, error_type, error_str);
        emit getVoiceTtsSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::postVoiceOfflineSyntax(SWGVoicePostOfflineSyntax& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/asr/offlinesyntax");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");


    
    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::postVoiceOfflineSyntaxCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::postVoiceOfflineSyntaxCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGCommonResponse* output = static_cast<SWGCommonResponse*>(create(json, QString("SWGCommonResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGCommonResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postVoiceOfflineSyntaxSignal(output);
    } else {
        emit postVoiceOfflineSyntaxSignalE(output, error_type, error_str);
        emit postVoiceOfflineSyntaxSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::putVoiceAsr(SWGVoiceAsrOption& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/asr");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "PUT");


    
    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::putVoiceAsrCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::putVoiceAsrCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGCommonResponse* output = static_cast<SWGCommonResponse*>(create(json, QString("SWGCommonResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGCommonResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit putVoiceAsrSignal(output);
    } else {
        emit putVoiceAsrSignalE(output, error_type, error_str);
        emit putVoiceAsrSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::putVoiceIat(SWGVoiceIatRequest& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/iat");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "PUT");


    
    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::putVoiceIatCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::putVoiceIatCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGCommonResponse* output = static_cast<SWGCommonResponse*>(create(json, QString("SWGCommonResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGCommonResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit putVoiceIatSignal(output);
    } else {
        emit putVoiceIatSignalE(output, error_type, error_str);
        emit putVoiceIatSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::putVoiceOfflineSyntax(SWGVoicePutOfflineSyntax& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/asr/offlinesyntax");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "PUT");


    
    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::putVoiceOfflineSyntaxCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::putVoiceOfflineSyntaxCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGCommonResponse* output = static_cast<SWGCommonResponse*>(create(json, QString("SWGCommonResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGCommonResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit putVoiceOfflineSyntaxSignal(output);
    } else {
        emit putVoiceOfflineSyntaxSignalE(output, error_type, error_str);
        emit putVoiceOfflineSyntaxSignalEFull(worker, error_type, error_str);
    }
}

void
SWGVoiceApi::putVoiceTts(SWGVoiceTTSStr& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/voice/tts");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "PUT");


    
    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGVoiceApi::putVoiceTtsCallback);

    worker->execute(&input);
}

void
SWGVoiceApi::putVoiceTtsCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGCommonResponse* output = static_cast<SWGCommonResponse*>(create(json, QString("SWGCommonResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGCommonResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit putVoiceTtsSignal(output);
    } else {
        emit putVoiceTtsSignalE(output, error_type, error_str);
        emit putVoiceTtsSignalEFull(worker, error_type, error_str);
    }
}


}
