/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGSubscriptionsApi_H_
#define _SWG_SWGSubscriptionsApi_H_

#include "SWGHttpRequest.h"

#include "SWGCommonResponse.h"
#include "SWGSubscriptionsAsrVoice.h"
#include "SWGSubscriptionsAsrVoiceDelete.h"
#include "SWGSubscriptionsIatVoice.h"
#include "SWGSubscriptionsIatVoiceDelete.h"
#include "SWGSubscriptionsMotions.h"
#include "SWGSubscriptionsMotionsDelete.h"
#include "SWGSubscriptionsMotionsGait.h"
#include "SWGSubscriptionsMotionsGaitDelete.h"
#include "SWGSubscriptionsSensors.h"
#include "SWGSubscriptionsSensorsDelete.h"
#include "SWGSubscriptionsTtsVoice.h"
#include "SWGSubscriptionsTtsVoiceDelete.h"
#include "SWGSubscriptionsVisions.h"
#include "SWGSubscriptionsVisionsDelete.h"

#include <QObject>

namespace Swagger {

class SWGSubscriptionsApi: public QObject {
    Q_OBJECT

public:
    SWGSubscriptionsApi();
    SWGSubscriptionsApi(QString host, QString basePath);
    ~SWGSubscriptionsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void deleteMotionsGaitSubscription(SWGSubscriptionsMotionsGaitDelete& body);
    void deleteMotionsSubscription(SWGSubscriptionsMotionsDelete& body);
    void deleteSensorsSubscription(SWGSubscriptionsSensorsDelete& body);
    void deleteVisionsSubscription(SWGSubscriptionsVisionsDelete& body);
    void deleteVoiceAsrSubscription(SWGSubscriptionsAsrVoiceDelete& body);
    void deleteVoiceIatSubscription(SWGSubscriptionsIatVoiceDelete& body);
    void deleteVoiceTtsSubscription(SWGSubscriptionsTtsVoiceDelete& body);
    void postMotionsGaitSubscription(SWGSubscriptionsMotionsGait& body);
    void postMotionsSubscription(SWGSubscriptionsMotions& body);
    void postSensorsSubscription(SWGSubscriptionsSensors& body);
    void postVisionsSubscription(SWGSubscriptionsVisions& body);
    void postVoiceAsrSubscriptions(SWGSubscriptionsAsrVoice& body);
    void postVoiceIatSubscription(SWGSubscriptionsIatVoice& body);
    void postVoiceTtsSubscriptions(SWGSubscriptionsTtsVoice& body);
    
private:
    void deleteMotionsGaitSubscriptionCallback (SWGHttpRequestWorker * worker);
    void deleteMotionsSubscriptionCallback (SWGHttpRequestWorker * worker);
    void deleteSensorsSubscriptionCallback (SWGHttpRequestWorker * worker);
    void deleteVisionsSubscriptionCallback (SWGHttpRequestWorker * worker);
    void deleteVoiceAsrSubscriptionCallback (SWGHttpRequestWorker * worker);
    void deleteVoiceIatSubscriptionCallback (SWGHttpRequestWorker * worker);
    void deleteVoiceTtsSubscriptionCallback (SWGHttpRequestWorker * worker);
    void postMotionsGaitSubscriptionCallback (SWGHttpRequestWorker * worker);
    void postMotionsSubscriptionCallback (SWGHttpRequestWorker * worker);
    void postSensorsSubscriptionCallback (SWGHttpRequestWorker * worker);
    void postVisionsSubscriptionCallback (SWGHttpRequestWorker * worker);
    void postVoiceAsrSubscriptionsCallback (SWGHttpRequestWorker * worker);
    void postVoiceIatSubscriptionCallback (SWGHttpRequestWorker * worker);
    void postVoiceTtsSubscriptionsCallback (SWGHttpRequestWorker * worker);
    
signals:
    void deleteMotionsGaitSubscriptionSignal(SWGCommonResponse* summary);
    void deleteMotionsSubscriptionSignal(SWGCommonResponse* summary);
    void deleteSensorsSubscriptionSignal(SWGCommonResponse* summary);
    void deleteVisionsSubscriptionSignal(SWGCommonResponse* summary);
    void deleteVoiceAsrSubscriptionSignal(SWGCommonResponse* summary);
    void deleteVoiceIatSubscriptionSignal(SWGCommonResponse* summary);
    void deleteVoiceTtsSubscriptionSignal(SWGCommonResponse* summary);
    void postMotionsGaitSubscriptionSignal(SWGCommonResponse* summary);
    void postMotionsSubscriptionSignal(SWGCommonResponse* summary);
    void postSensorsSubscriptionSignal(SWGCommonResponse* summary);
    void postVisionsSubscriptionSignal(SWGCommonResponse* summary);
    void postVoiceAsrSubscriptionsSignal(SWGCommonResponse* summary);
    void postVoiceIatSubscriptionSignal(SWGCommonResponse* summary);
    void postVoiceTtsSubscriptionsSignal(SWGCommonResponse* summary);
    
    void deleteMotionsGaitSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteMotionsSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteSensorsSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteVisionsSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteVoiceAsrSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteVoiceIatSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteVoiceTtsSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postMotionsGaitSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postMotionsSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postSensorsSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postVisionsSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postVoiceAsrSubscriptionsSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postVoiceIatSubscriptionSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postVoiceTtsSubscriptionsSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void deleteMotionsGaitSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteMotionsSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteSensorsSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteVisionsSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteVoiceAsrSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteVoiceIatSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteVoiceTtsSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postMotionsGaitSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postMotionsSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postSensorsSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postVisionsSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postVoiceAsrSubscriptionsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postVoiceIatSubscriptionSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postVoiceTtsSubscriptionsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
