/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGServosResult.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGServosResult::SWGServosResult(QString json) {
    init();
    this->fromJson(json);
}

SWGServosResult::SWGServosResult() {
    init();
}

SWGServosResult::~SWGServosResult() {
    this->cleanup();
}

void
SWGServosResult::init() {
    right_shoulder_roll = false;
    m_right_shoulder_roll_isSet = false;
    right_shoulder_flex = false;
    m_right_shoulder_flex_isSet = false;
    right_elbow_flex = false;
    m_right_elbow_flex_isSet = false;
    left_shoulder_roll = false;
    m_left_shoulder_roll_isSet = false;
    left_shoulder_flex = false;
    m_left_shoulder_flex_isSet = false;
    left_elbow_flex = false;
    m_left_elbow_flex_isSet = false;
    right_hip_lr = false;
    m_right_hip_lr_isSet = false;
    right_hip_fb = false;
    m_right_hip_fb_isSet = false;
    right_knee_flex = false;
    m_right_knee_flex_isSet = false;
    right_ankle_fb = false;
    m_right_ankle_fb_isSet = false;
    right_ankle_ud = false;
    m_right_ankle_ud_isSet = false;
    left_hip_lr = false;
    m_left_hip_lr_isSet = false;
    left_hip_fb = false;
    m_left_hip_fb_isSet = false;
    left_knee_flex = false;
    m_left_knee_flex_isSet = false;
    left_ankle_fb = false;
    m_left_ankle_fb_isSet = false;
    left_ankle_ud = false;
    m_left_ankle_ud_isSet = false;
    neck_lr = false;
    m_neck_lr_isSet = false;
}

void
SWGServosResult::cleanup() {

















}

SWGServosResult*
SWGServosResult::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGServosResult::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&right_shoulder_roll, pJson["RightShoulderRoll"], "bool", "");
    
    ::Swagger::setValue(&right_shoulder_flex, pJson["RightShoulderFlex"], "bool", "");
    
    ::Swagger::setValue(&right_elbow_flex, pJson["RightElbowFlex"], "bool", "");
    
    ::Swagger::setValue(&left_shoulder_roll, pJson["LeftShoulderRoll"], "bool", "");
    
    ::Swagger::setValue(&left_shoulder_flex, pJson["LeftShoulderFlex"], "bool", "");
    
    ::Swagger::setValue(&left_elbow_flex, pJson["LeftElbowFlex"], "bool", "");
    
    ::Swagger::setValue(&right_hip_lr, pJson["RightHipLR"], "bool", "");
    
    ::Swagger::setValue(&right_hip_fb, pJson["RightHipFB"], "bool", "");
    
    ::Swagger::setValue(&right_knee_flex, pJson["RightKneeFlex"], "bool", "");
    
    ::Swagger::setValue(&right_ankle_fb, pJson["RightAnkleFB"], "bool", "");
    
    ::Swagger::setValue(&right_ankle_ud, pJson["RightAnkleUD"], "bool", "");
    
    ::Swagger::setValue(&left_hip_lr, pJson["LeftHipLR"], "bool", "");
    
    ::Swagger::setValue(&left_hip_fb, pJson["LeftHipFB"], "bool", "");
    
    ::Swagger::setValue(&left_knee_flex, pJson["LeftKneeFlex"], "bool", "");
    
    ::Swagger::setValue(&left_ankle_fb, pJson["LeftAnkleFB"], "bool", "");
    
    ::Swagger::setValue(&left_ankle_ud, pJson["LeftAnkleUD"], "bool", "");
    
    ::Swagger::setValue(&neck_lr, pJson["NeckLR"], "bool", "");
    
}

QString
SWGServosResult::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGServosResult::asJsonObject() {
    QJsonObject obj;
    if(m_right_shoulder_roll_isSet){
        obj.insert("RightShoulderRoll", QJsonValue(right_shoulder_roll));
    }
    if(m_right_shoulder_flex_isSet){
        obj.insert("RightShoulderFlex", QJsonValue(right_shoulder_flex));
    }
    if(m_right_elbow_flex_isSet){
        obj.insert("RightElbowFlex", QJsonValue(right_elbow_flex));
    }
    if(m_left_shoulder_roll_isSet){
        obj.insert("LeftShoulderRoll", QJsonValue(left_shoulder_roll));
    }
    if(m_left_shoulder_flex_isSet){
        obj.insert("LeftShoulderFlex", QJsonValue(left_shoulder_flex));
    }
    if(m_left_elbow_flex_isSet){
        obj.insert("LeftElbowFlex", QJsonValue(left_elbow_flex));
    }
    if(m_right_hip_lr_isSet){
        obj.insert("RightHipLR", QJsonValue(right_hip_lr));
    }
    if(m_right_hip_fb_isSet){
        obj.insert("RightHipFB", QJsonValue(right_hip_fb));
    }
    if(m_right_knee_flex_isSet){
        obj.insert("RightKneeFlex", QJsonValue(right_knee_flex));
    }
    if(m_right_ankle_fb_isSet){
        obj.insert("RightAnkleFB", QJsonValue(right_ankle_fb));
    }
    if(m_right_ankle_ud_isSet){
        obj.insert("RightAnkleUD", QJsonValue(right_ankle_ud));
    }
    if(m_left_hip_lr_isSet){
        obj.insert("LeftHipLR", QJsonValue(left_hip_lr));
    }
    if(m_left_hip_fb_isSet){
        obj.insert("LeftHipFB", QJsonValue(left_hip_fb));
    }
    if(m_left_knee_flex_isSet){
        obj.insert("LeftKneeFlex", QJsonValue(left_knee_flex));
    }
    if(m_left_ankle_fb_isSet){
        obj.insert("LeftAnkleFB", QJsonValue(left_ankle_fb));
    }
    if(m_left_ankle_ud_isSet){
        obj.insert("LeftAnkleUD", QJsonValue(left_ankle_ud));
    }
    if(m_neck_lr_isSet){
        obj.insert("NeckLR", QJsonValue(neck_lr));
    }

    return obj;
}

bool
SWGServosResult::isRightShoulderRoll() {
    return right_shoulder_roll;
}
void
SWGServosResult::setRightShoulderRoll(bool right_shoulder_roll) {
    this->right_shoulder_roll = right_shoulder_roll;
    this->m_right_shoulder_roll_isSet = true;
}

bool
SWGServosResult::isRightShoulderFlex() {
    return right_shoulder_flex;
}
void
SWGServosResult::setRightShoulderFlex(bool right_shoulder_flex) {
    this->right_shoulder_flex = right_shoulder_flex;
    this->m_right_shoulder_flex_isSet = true;
}

bool
SWGServosResult::isRightElbowFlex() {
    return right_elbow_flex;
}
void
SWGServosResult::setRightElbowFlex(bool right_elbow_flex) {
    this->right_elbow_flex = right_elbow_flex;
    this->m_right_elbow_flex_isSet = true;
}

bool
SWGServosResult::isLeftShoulderRoll() {
    return left_shoulder_roll;
}
void
SWGServosResult::setLeftShoulderRoll(bool left_shoulder_roll) {
    this->left_shoulder_roll = left_shoulder_roll;
    this->m_left_shoulder_roll_isSet = true;
}

bool
SWGServosResult::isLeftShoulderFlex() {
    return left_shoulder_flex;
}
void
SWGServosResult::setLeftShoulderFlex(bool left_shoulder_flex) {
    this->left_shoulder_flex = left_shoulder_flex;
    this->m_left_shoulder_flex_isSet = true;
}

bool
SWGServosResult::isLeftElbowFlex() {
    return left_elbow_flex;
}
void
SWGServosResult::setLeftElbowFlex(bool left_elbow_flex) {
    this->left_elbow_flex = left_elbow_flex;
    this->m_left_elbow_flex_isSet = true;
}

bool
SWGServosResult::isRightHipLr() {
    return right_hip_lr;
}
void
SWGServosResult::setRightHipLr(bool right_hip_lr) {
    this->right_hip_lr = right_hip_lr;
    this->m_right_hip_lr_isSet = true;
}

bool
SWGServosResult::isRightHipFb() {
    return right_hip_fb;
}
void
SWGServosResult::setRightHipFb(bool right_hip_fb) {
    this->right_hip_fb = right_hip_fb;
    this->m_right_hip_fb_isSet = true;
}

bool
SWGServosResult::isRightKneeFlex() {
    return right_knee_flex;
}
void
SWGServosResult::setRightKneeFlex(bool right_knee_flex) {
    this->right_knee_flex = right_knee_flex;
    this->m_right_knee_flex_isSet = true;
}

bool
SWGServosResult::isRightAnkleFb() {
    return right_ankle_fb;
}
void
SWGServosResult::setRightAnkleFb(bool right_ankle_fb) {
    this->right_ankle_fb = right_ankle_fb;
    this->m_right_ankle_fb_isSet = true;
}

bool
SWGServosResult::isRightAnkleUd() {
    return right_ankle_ud;
}
void
SWGServosResult::setRightAnkleUd(bool right_ankle_ud) {
    this->right_ankle_ud = right_ankle_ud;
    this->m_right_ankle_ud_isSet = true;
}

bool
SWGServosResult::isLeftHipLr() {
    return left_hip_lr;
}
void
SWGServosResult::setLeftHipLr(bool left_hip_lr) {
    this->left_hip_lr = left_hip_lr;
    this->m_left_hip_lr_isSet = true;
}

bool
SWGServosResult::isLeftHipFb() {
    return left_hip_fb;
}
void
SWGServosResult::setLeftHipFb(bool left_hip_fb) {
    this->left_hip_fb = left_hip_fb;
    this->m_left_hip_fb_isSet = true;
}

bool
SWGServosResult::isLeftKneeFlex() {
    return left_knee_flex;
}
void
SWGServosResult::setLeftKneeFlex(bool left_knee_flex) {
    this->left_knee_flex = left_knee_flex;
    this->m_left_knee_flex_isSet = true;
}

bool
SWGServosResult::isLeftAnkleFb() {
    return left_ankle_fb;
}
void
SWGServosResult::setLeftAnkleFb(bool left_ankle_fb) {
    this->left_ankle_fb = left_ankle_fb;
    this->m_left_ankle_fb_isSet = true;
}

bool
SWGServosResult::isLeftAnkleUd() {
    return left_ankle_ud;
}
void
SWGServosResult::setLeftAnkleUd(bool left_ankle_ud) {
    this->left_ankle_ud = left_ankle_ud;
    this->m_left_ankle_ud_isSet = true;
}

bool
SWGServosResult::isNeckLr() {
    return neck_lr;
}
void
SWGServosResult::setNeckLr(bool neck_lr) {
    this->neck_lr = neck_lr;
    this->m_neck_lr_isSet = true;
}


bool
SWGServosResult::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_right_shoulder_roll_isSet){ isObjectUpdated = true; break;}
        if(m_right_shoulder_flex_isSet){ isObjectUpdated = true; break;}
        if(m_right_elbow_flex_isSet){ isObjectUpdated = true; break;}
        if(m_left_shoulder_roll_isSet){ isObjectUpdated = true; break;}
        if(m_left_shoulder_flex_isSet){ isObjectUpdated = true; break;}
        if(m_left_elbow_flex_isSet){ isObjectUpdated = true; break;}
        if(m_right_hip_lr_isSet){ isObjectUpdated = true; break;}
        if(m_right_hip_fb_isSet){ isObjectUpdated = true; break;}
        if(m_right_knee_flex_isSet){ isObjectUpdated = true; break;}
        if(m_right_ankle_fb_isSet){ isObjectUpdated = true; break;}
        if(m_right_ankle_ud_isSet){ isObjectUpdated = true; break;}
        if(m_left_hip_lr_isSet){ isObjectUpdated = true; break;}
        if(m_left_hip_fb_isSet){ isObjectUpdated = true; break;}
        if(m_left_knee_flex_isSet){ isObjectUpdated = true; break;}
        if(m_left_ankle_fb_isSet){ isObjectUpdated = true; break;}
        if(m_left_ankle_ud_isSet){ isObjectUpdated = true; break;}
        if(m_neck_lr_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

