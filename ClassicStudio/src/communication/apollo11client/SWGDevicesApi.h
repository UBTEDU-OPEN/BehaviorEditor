/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGDevicesApi_H_
#define _SWG_SWGDevicesApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGCommonResponse.h"
#include "SWGDevicesBatteryResponse.h"
#include "SWGDevicesFallManagement.h"
#include "SWGDevicesFallManagementResponse.h"
#include "SWGDevicesLED.h"
#include "SWGDevicesLEDResponse.h"
#include "SWGDevicesLanguage.h"
#include "SWGDevicesLanguageResponse.h"
#include "SWGDevicesVersionsResponse.h"
#include "SWGDevicesVolume.h"
#include "SWGDevicesVolumeResponse.h"

#include <QObject>

namespace Swagger {

class SWGDevicesApi: public QObject {
    Q_OBJECT

public:
    SWGDevicesApi();
    SWGDevicesApi(QString host, QString basePath);
    ~SWGDevicesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void getDevicesBattery();
    void getDevicesFallManagement();
    void getDevicesLanguages();
    void getDevicesLed();
    void getDevicesVersions(QList<QString*>* type);
    void getDevicesVolume();
    void putDevicesFallManagement(SWGDevicesFallManagement& body);
    void putDevicesLanguages(SWGDevicesLanguage& body);
    void putDevicesLed(SWGDevicesLED& body);
    void putDevicesVolume(SWGDevicesVolume& body);
    
private:
    void getDevicesBatteryCallback (SWGHttpRequestWorker * worker);
    void getDevicesFallManagementCallback (SWGHttpRequestWorker * worker);
    void getDevicesLanguagesCallback (SWGHttpRequestWorker * worker);
    void getDevicesLedCallback (SWGHttpRequestWorker * worker);
    void getDevicesVersionsCallback (SWGHttpRequestWorker * worker);
    void getDevicesVolumeCallback (SWGHttpRequestWorker * worker);
    void putDevicesFallManagementCallback (SWGHttpRequestWorker * worker);
    void putDevicesLanguagesCallback (SWGHttpRequestWorker * worker);
    void putDevicesLedCallback (SWGHttpRequestWorker * worker);
    void putDevicesVolumeCallback (SWGHttpRequestWorker * worker);
    
signals:
    void getDevicesBatterySignal(SWGDevicesBatteryResponse* summary);
    void getDevicesFallManagementSignal(SWGDevicesFallManagementResponse* summary);
    void getDevicesLanguagesSignal(SWGDevicesLanguageResponse* summary);
    void getDevicesLedSignal(SWGDevicesLEDResponse* summary);
    void getDevicesVersionsSignal(SWGDevicesVersionsResponse* summary);
    void getDevicesVolumeSignal(SWGDevicesVolumeResponse* summary);
    void putDevicesFallManagementSignal(SWGCommonResponse* summary);
    void putDevicesLanguagesSignal(SWGCommonResponse* summary);
    void putDevicesLedSignal(SWGCommonResponse* summary);
    void putDevicesVolumeSignal(SWGCommonResponse* summary);
    
    void getDevicesBatterySignalE(SWGDevicesBatteryResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesFallManagementSignalE(SWGDevicesFallManagementResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesLanguagesSignalE(SWGDevicesLanguageResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesLedSignalE(SWGDevicesLEDResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesVersionsSignalE(SWGDevicesVersionsResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesVolumeSignalE(SWGDevicesVolumeResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putDevicesFallManagementSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putDevicesLanguagesSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putDevicesLedSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putDevicesVolumeSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void getDevicesBatterySignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesFallManagementSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesLanguagesSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesLedSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesVersionsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDevicesVolumeSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putDevicesFallManagementSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putDevicesLanguagesSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putDevicesLedSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putDevicesVolumeSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
