/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGSensorsTouchInfo.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGSensorsTouchInfo::SWGSensorsTouchInfo(QString json) {
    init();
    this->fromJson(json);
}

SWGSensorsTouchInfo::SWGSensorsTouchInfo() {
    init();
}

SWGSensorsTouchInfo::~SWGSensorsTouchInfo() {
    this->cleanup();
}

void
SWGSensorsTouchInfo::init() {
    id = 0;
    m_id_isSet = false;
    slot = 0;
    m_slot_isSet = false;
    value = 0;
    m_value_isSet = false;
}

void
SWGSensorsTouchInfo::cleanup() {



}

SWGSensorsTouchInfo*
SWGSensorsTouchInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSensorsTouchInfo::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "qint32", "");
    
    ::Swagger::setValue(&slot, pJson["slot"], "qint32", "");
    
    ::Swagger::setValue(&value, pJson["value"], "qint32", "");
    
}

QString
SWGSensorsTouchInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGSensorsTouchInfo::asJsonObject() {
    QJsonObject obj;
    if(m_id_isSet){
        obj.insert("id", QJsonValue(id));
    }
    if(m_slot_isSet){
        obj.insert("slot", QJsonValue(slot));
    }
    if(m_value_isSet){
        obj.insert("value", QJsonValue(value));
    }

    return obj;
}

qint32
SWGSensorsTouchInfo::getId() {
    return id;
}
void
SWGSensorsTouchInfo::setId(qint32 id) {
    this->id = id;
    this->m_id_isSet = true;
}

qint32
SWGSensorsTouchInfo::getSlot() {
    return slot;
}
void
SWGSensorsTouchInfo::setSlot(qint32 slot) {
    this->slot = slot;
    this->m_slot_isSet = true;
}

qint32
SWGSensorsTouchInfo::getValue() {
    return value;
}
void
SWGSensorsTouchInfo::setValue(qint32 value) {
    this->value = value;
    this->m_value_isSet = true;
}


bool
SWGSensorsTouchInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_id_isSet){ isObjectUpdated = true; break;}
        if(m_slot_isSet){ isObjectUpdated = true; break;}
        if(m_value_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

