/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGMediaApi_H_
#define _SWG_SWGMediaApi_H_

#include "SWGHttpRequest.h"

#include "SWGCommonResponse.h"
#include "SWGHttpRequest.h"
#include "SWGMediaMusicListResponse.h"
#include "SWGMediaMusicOperation.h"
#include "SWGMediaMusicStatusResponse.h"
#include "SWGName.h"
#include "SWGRuntimeResponse.h"

#include <QObject>

namespace Swagger {

class SWGMediaApi: public QObject {
    Q_OBJECT

public:
    SWGMediaApi();
    SWGMediaApi(QString host, QString basePath);
    ~SWGMediaApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void deleteMediaMusic(SWGName& body);
    void getMediaMusic();
    void getMediaMusicList();
    void postMediaMusic(SWGHttpRequestInputFileElement* file);
    void putMediaMusic(SWGMediaMusicOperation& body);
    
private:
    void deleteMediaMusicCallback (SWGHttpRequestWorker * worker);
    void getMediaMusicCallback (SWGHttpRequestWorker * worker);
    void getMediaMusicListCallback (SWGHttpRequestWorker * worker);
    void postMediaMusicCallback (SWGHttpRequestWorker * worker);
    void putMediaMusicCallback (SWGHttpRequestWorker * worker);
    
signals:
    void deleteMediaMusicSignal(SWGCommonResponse* summary);
    void getMediaMusicSignal(SWGMediaMusicStatusResponse* summary);
    void getMediaMusicListSignal(SWGMediaMusicListResponse* summary);
    void postMediaMusicSignal(SWGCommonResponse* summary);
    void putMediaMusicSignal(SWGRuntimeResponse* summary);
    
    void deleteMediaMusicSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMediaMusicSignalE(SWGMediaMusicStatusResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMediaMusicListSignalE(SWGMediaMusicListResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postMediaMusicSignalE(SWGCommonResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putMediaMusicSignalE(SWGRuntimeResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void deleteMediaMusicSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMediaMusicSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMediaMusicListSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postMediaMusicSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putMediaMusicSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
