/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGSensorsGyroInfo.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGSensorsGyroInfo::SWGSensorsGyroInfo(QString json) {
    init();
    this->fromJson(json);
}

SWGSensorsGyroInfo::SWGSensorsGyroInfo() {
    init();
}

SWGSensorsGyroInfo::~SWGSensorsGyroInfo() {
    this->cleanup();
}

void
SWGSensorsGyroInfo::init() {
    id = 0;
    m_id_isSet = false;
    gyro_x = 0.0f;
    m_gyro_x_isSet = false;
    gyro_y = 0.0f;
    m_gyro_y_isSet = false;
    gyro_z = 0.0f;
    m_gyro_z_isSet = false;
    accel_x = 0.0f;
    m_accel_x_isSet = false;
    accel_y = 0.0f;
    m_accel_y_isSet = false;
    accel_z = 0.0f;
    m_accel_z_isSet = false;
    compass_x = 0.0f;
    m_compass_x_isSet = false;
    compass_y = 0.0f;
    m_compass_y_isSet = false;
    compass_z = 0.0f;
    m_compass_z_isSet = false;
    euler_x = 0.0f;
    m_euler_x_isSet = false;
    euler_y = 0.0f;
    m_euler_y_isSet = false;
    euler_z = 0.0f;
    m_euler_z_isSet = false;
}

void
SWGSensorsGyroInfo::cleanup() {













}

SWGSensorsGyroInfo*
SWGSensorsGyroInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSensorsGyroInfo::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "qint32", "");
    
    ::Swagger::setValue(&gyro_x, pJson["gyro-x"], "float", "");
    
    ::Swagger::setValue(&gyro_y, pJson["gyro-y"], "float", "");
    
    ::Swagger::setValue(&gyro_z, pJson["gyro-z"], "float", "");
    
    ::Swagger::setValue(&accel_x, pJson["accel-x"], "float", "");
    
    ::Swagger::setValue(&accel_y, pJson["accel-y"], "float", "");
    
    ::Swagger::setValue(&accel_z, pJson["accel-z"], "float", "");
    
    ::Swagger::setValue(&compass_x, pJson["compass-x"], "float", "");
    
    ::Swagger::setValue(&compass_y, pJson["compass-y"], "float", "");
    
    ::Swagger::setValue(&compass_z, pJson["compass-z"], "float", "");
    
    ::Swagger::setValue(&euler_x, pJson["euler-x"], "float", "");
    
    ::Swagger::setValue(&euler_y, pJson["euler-y"], "float", "");
    
    ::Swagger::setValue(&euler_z, pJson["euler-z"], "float", "");
    
}

QString
SWGSensorsGyroInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGSensorsGyroInfo::asJsonObject() {
    QJsonObject obj;
    if(m_id_isSet){
        obj.insert("id", QJsonValue(id));
    }
    if(m_gyro_x_isSet){
        obj.insert("gyro-x", QJsonValue(gyro_x));
    }
    if(m_gyro_y_isSet){
        obj.insert("gyro-y", QJsonValue(gyro_y));
    }
    if(m_gyro_z_isSet){
        obj.insert("gyro-z", QJsonValue(gyro_z));
    }
    if(m_accel_x_isSet){
        obj.insert("accel-x", QJsonValue(accel_x));
    }
    if(m_accel_y_isSet){
        obj.insert("accel-y", QJsonValue(accel_y));
    }
    if(m_accel_z_isSet){
        obj.insert("accel-z", QJsonValue(accel_z));
    }
    if(m_compass_x_isSet){
        obj.insert("compass-x", QJsonValue(compass_x));
    }
    if(m_compass_y_isSet){
        obj.insert("compass-y", QJsonValue(compass_y));
    }
    if(m_compass_z_isSet){
        obj.insert("compass-z", QJsonValue(compass_z));
    }
    if(m_euler_x_isSet){
        obj.insert("euler-x", QJsonValue(euler_x));
    }
    if(m_euler_y_isSet){
        obj.insert("euler-y", QJsonValue(euler_y));
    }
    if(m_euler_z_isSet){
        obj.insert("euler-z", QJsonValue(euler_z));
    }

    return obj;
}

qint32
SWGSensorsGyroInfo::getId() {
    return id;
}
void
SWGSensorsGyroInfo::setId(qint32 id) {
    this->id = id;
    this->m_id_isSet = true;
}

float
SWGSensorsGyroInfo::getGyroX() {
    return gyro_x;
}
void
SWGSensorsGyroInfo::setGyroX(float gyro_x) {
    this->gyro_x = gyro_x;
    this->m_gyro_x_isSet = true;
}

float
SWGSensorsGyroInfo::getGyroY() {
    return gyro_y;
}
void
SWGSensorsGyroInfo::setGyroY(float gyro_y) {
    this->gyro_y = gyro_y;
    this->m_gyro_y_isSet = true;
}

float
SWGSensorsGyroInfo::getGyroZ() {
    return gyro_z;
}
void
SWGSensorsGyroInfo::setGyroZ(float gyro_z) {
    this->gyro_z = gyro_z;
    this->m_gyro_z_isSet = true;
}

float
SWGSensorsGyroInfo::getAccelX() {
    return accel_x;
}
void
SWGSensorsGyroInfo::setAccelX(float accel_x) {
    this->accel_x = accel_x;
    this->m_accel_x_isSet = true;
}

float
SWGSensorsGyroInfo::getAccelY() {
    return accel_y;
}
void
SWGSensorsGyroInfo::setAccelY(float accel_y) {
    this->accel_y = accel_y;
    this->m_accel_y_isSet = true;
}

float
SWGSensorsGyroInfo::getAccelZ() {
    return accel_z;
}
void
SWGSensorsGyroInfo::setAccelZ(float accel_z) {
    this->accel_z = accel_z;
    this->m_accel_z_isSet = true;
}

float
SWGSensorsGyroInfo::getCompassX() {
    return compass_x;
}
void
SWGSensorsGyroInfo::setCompassX(float compass_x) {
    this->compass_x = compass_x;
    this->m_compass_x_isSet = true;
}

float
SWGSensorsGyroInfo::getCompassY() {
    return compass_y;
}
void
SWGSensorsGyroInfo::setCompassY(float compass_y) {
    this->compass_y = compass_y;
    this->m_compass_y_isSet = true;
}

float
SWGSensorsGyroInfo::getCompassZ() {
    return compass_z;
}
void
SWGSensorsGyroInfo::setCompassZ(float compass_z) {
    this->compass_z = compass_z;
    this->m_compass_z_isSet = true;
}

float
SWGSensorsGyroInfo::getEulerX() {
    return euler_x;
}
void
SWGSensorsGyroInfo::setEulerX(float euler_x) {
    this->euler_x = euler_x;
    this->m_euler_x_isSet = true;
}

float
SWGSensorsGyroInfo::getEulerY() {
    return euler_y;
}
void
SWGSensorsGyroInfo::setEulerY(float euler_y) {
    this->euler_y = euler_y;
    this->m_euler_y_isSet = true;
}

float
SWGSensorsGyroInfo::getEulerZ() {
    return euler_z;
}
void
SWGSensorsGyroInfo::setEulerZ(float euler_z) {
    this->euler_z = euler_z;
    this->m_euler_z_isSet = true;
}


bool
SWGSensorsGyroInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_id_isSet){ isObjectUpdated = true; break;}
        if(m_gyro_x_isSet){ isObjectUpdated = true; break;}
        if(m_gyro_y_isSet){ isObjectUpdated = true; break;}
        if(m_gyro_z_isSet){ isObjectUpdated = true; break;}
        if(m_accel_x_isSet){ isObjectUpdated = true; break;}
        if(m_accel_y_isSet){ isObjectUpdated = true; break;}
        if(m_accel_z_isSet){ isObjectUpdated = true; break;}
        if(m_compass_x_isSet){ isObjectUpdated = true; break;}
        if(m_compass_y_isSet){ isObjectUpdated = true; break;}
        if(m_compass_z_isSet){ isObjectUpdated = true; break;}
        if(m_euler_x_isSet){ isObjectUpdated = true; break;}
        if(m_euler_y_isSet){ isObjectUpdated = true; break;}
        if(m_euler_z_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

