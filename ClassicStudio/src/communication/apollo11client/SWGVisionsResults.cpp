/**
 * Yanshee RESTful API
 *  ## 概述 Yanshee RESTful APIs是由使用[swagger-codegen](https://github.com/swagger-api/swagger-codegen)基于 [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki)的工程。 所有的API由Flask的[Connexion](https://github.com/zalando/connexion)来解释。 Yanshee-ROS中的apollo提供所有的RESTful APIs服务。 同时Yanshee RESTful APIs提供英文和中文两个版本： - [英文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [中文版本](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## 依赖 Python 2.7 or 3.4+  
 *
 * OpenAPI spec version: 1.0.1
 * Contact: swenggroup@ubtrobot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGVisionsResults.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGVisionsResults::SWGVisionsResults(QString json) {
    init();
    this->fromJson(json);
}

SWGVisionsResults::SWGVisionsResults() {
    init();
}

SWGVisionsResults::~SWGVisionsResults() {
    this->cleanup();
}

void
SWGVisionsResults::init() {
    gesture = new QString("");
    m_gesture_isSet = false;
    analysis = new SWGVisionsAnalysis();
    m_analysis_isSet = false;
    recognition = new SWGName();
    m_recognition_isSet = false;
    quantity = 0;
    m_quantity_isSet = false;
    color = new QList<SWGName*>();
    m_color_isSet = false;
}

void
SWGVisionsResults::cleanup() {
    if(gesture != nullptr) { 
        delete gesture;
    }
    if(analysis != nullptr) { 
        delete analysis;
    }
    if(recognition != nullptr) { 
        delete recognition;
    }

    if(color != nullptr) { 
        auto arr = color;
        for(auto o: *arr) { 
            delete o;
        }
        delete color;
    }
}

SWGVisionsResults*
SWGVisionsResults::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGVisionsResults::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&gesture, pJson["gesture"], "QString", "QString");
    
    ::Swagger::setValue(&analysis, pJson["analysis"], "SWGVisionsAnalysis", "SWGVisionsAnalysis");
    
    ::Swagger::setValue(&recognition, pJson["recognition"], "SWGName", "SWGName");
    
    ::Swagger::setValue(&quantity, pJson["quantity"], "qint32", "");
    
    
    ::Swagger::setValue(&color, pJson["color"], "QList", "SWGName");
}

QString
SWGVisionsResults::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGVisionsResults::asJsonObject() {
    QJsonObject obj;
    if(gesture != nullptr && *gesture != QString("")){
        toJsonValue(QString("gesture"), gesture, obj, QString("QString"));
    }
    if((analysis != nullptr) && (analysis->isSet())){
        toJsonValue(QString("analysis"), analysis, obj, QString("SWGVisionsAnalysis"));
    }
    if((recognition != nullptr) && (recognition->isSet())){
        toJsonValue(QString("recognition"), recognition, obj, QString("SWGName"));
    }
    if(m_quantity_isSet){
        obj.insert("quantity", QJsonValue(quantity));
    }
    if(color->size() > 0){
        toJsonArray((QList<void*>*)color, obj, "color", "SWGName");
    }

    return obj;
}

QString*
SWGVisionsResults::getGesture() {
    return gesture;
}
void
SWGVisionsResults::setGesture(QString* gesture) {
    this->gesture = gesture;
    this->m_gesture_isSet = true;
}

SWGVisionsAnalysis*
SWGVisionsResults::getAnalysis() {
    return analysis;
}
void
SWGVisionsResults::setAnalysis(SWGVisionsAnalysis* analysis) {
    this->analysis = analysis;
    this->m_analysis_isSet = true;
}

SWGName*
SWGVisionsResults::getRecognition() {
    return recognition;
}
void
SWGVisionsResults::setRecognition(SWGName* recognition) {
    this->recognition = recognition;
    this->m_recognition_isSet = true;
}

qint32
SWGVisionsResults::getQuantity() {
    return quantity;
}
void
SWGVisionsResults::setQuantity(qint32 quantity) {
    this->quantity = quantity;
    this->m_quantity_isSet = true;
}

QList<SWGName*>*
SWGVisionsResults::getColor() {
    return color;
}
void
SWGVisionsResults::setColor(QList<SWGName*>* color) {
    this->color = color;
    this->m_color_isSet = true;
}


bool
SWGVisionsResults::isSet(){
    bool isObjectUpdated = false;
    do{
        if(gesture != nullptr && *gesture != QString("")){ isObjectUpdated = true; break;}
        if(analysis != nullptr && analysis->isSet()){ isObjectUpdated = true; break;}
        if(recognition != nullptr && recognition->isSet()){ isObjectUpdated = true; break;}
        if(m_quantity_isSet){ isObjectUpdated = true; break;}
        if(color->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

